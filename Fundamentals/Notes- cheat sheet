#################### NumPy ####################
import numpy as np

# Make an array (like a list)
x = np.array([0, 1, 2, 3])

# Make it multi-dimensional (i.e. print multiple rows)
x = np.array([[0, 1, 2, 3], [4, 5, 6, 7]])

OR (same output)

x = np.arange(8).reshape(2, 4)
	where 8 is the array range (arange) 0-8 being passed in
	and reshape gives 2 rows, 4 columns

# square each value
x = np.square(num1)

# square root each value
x = np.sqrt(num1)

# cosine each value
x = np.cos(num1)

# find the max or min value
np.max(array)

np.min(array)

# find the mean of an array
np.mean(array)

# find the standard deviation of an array
np.std(array)

# combine data on given set
df.<set>.aggregate(<numpy_fxn>)
	where the set can be the a grouped column from df
	and numpy_fxn can be anything from np.mean to np.std

# make a random list of consistent, replicable numbers
np.random.seed(num)

- need to call it everytime a .random() method is used, otherwise will give new numbers

#################### Pandas ####################
import pandas as pd

# make a data frame, primary way DS handle data
df = pd.DataFrame(array/csvfile/query)

# set aspects of pre-created data frame
df.column = ['col1', 'col2', 'col3']

df.index = ['row1', 'row2', 'row3']

OR

write them together

df = pd.DataFrame(
	arraydata,
	columns=[...],
	index=['...'])

# printing or calling aspects of a DF
df['column-name']

# index over rows and columns
df.loc['index-name']

df.loc['index-name', 'column-name']

can slice to minimize table

df.loc[:, 'column-name']

# integer indexing
df.iloc[index, column]

# filtering
df[df['column'] > 4]
	where results will only show where column data is over 4

df.groupby('column').<method>()
	where <method> is some action to do on the column group
		ex. .sum() or .count()

## making a graph
df.plot(kind='scatter', x='<xvalues>', y='<yvalues>')

can also do

df.plot(kind='line')

- not as powerful as matplotlib


## working with files

# reading a csv file
df = pd.read_csv('file.csv')

# copy data to new file
df = pd.to_csv('newfile.csv')

# read a json file
df = pd.read_json('file.json')

# copy data to new json file
df = pd.to_json('file.json')

# read xml file
import xml.etree.ElementTree as ET
tree = ET.parse('file.xml')
	because there is no equivalent read_xml, have to import library

#################### Matplotlib ####################
import matplotlib.pyplot as plt

# plot a graph
plt.plot([array])
plt.show()

set color:
plt.plot([array]. color='<color>')

set y axis 
plt.ylim([lowernum, uppernum])

set x axis
plt.xlim([lowernum, uppernum])

label x or y axis
plt.ylabel('name')
plt.xlabel('name')

label graph
plt.title('name')

# plot a scatter
plt.scatter(x=<xvalues>, y=<yvalues>)
plt.show()

# customize the scatter
plt.scatter(
	x=<xvalues>
	y=<yvalues>
	color='<color>'
	marker='x', s=10)

- marker can be 'o' as well, s is the marker thickness

# generate multiple plots in a single figure
plt.figure(figsize=(num1, num2))

plt.subplot(1, 2, 1)
plt.plot(df1)

plt.subplot(1, 2, 2)
plt.plot(df2)

# adding tight layout
plt.tight_layout()

- helpful with multiple subplots or loaded figures


#################### Python ####################

# opening files in Python
with open('file.txt') as <file>:
	text1 = <file>.readlines()
	print("This ile is {} lines long".format(len(text1))
	for line in text1:
		print(line)

- the with statement auto closes file after the statement exits




####################  ####################
